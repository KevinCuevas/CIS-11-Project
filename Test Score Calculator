;CIS 11 PROJECT
;KEVIN CUEVAS
;Carlos Velazquez
;Israel Zendejas
.ORIG x3000

;MAIN OF THE PROGRAM
LEA R0, MAIN
PUTS
MAIN	.STRINGZ "Enter 5 test scores range 0-99"
LD R0, LINE
OUT


;JUMPS TO GET_GRADE AND POP FUNCTIONS
;PUTTING GRADES INTO A ARRAY
JSR GRADE_INT
LEA R6, GRADES
STR R3, R6, #1 
JSR GET_LETTER
JSR POP
LD R0, LINE
OUT

;SAME PROCESS 4 MORE TIMES
JSR GRADE_INT
LEA R6, GRADES
STR R3, R6, #2 
JSR GET_LETTER
JSR POP
LD R0, LINE
OUT

JSR GRADE_INT
LEA R6, GRADES
STR R3, R6, #3 
JSR GET_LETTER
JSR POP
LD R0, LINE
OUT

JSR GRADE_INT
LEA R6, GRADES
STR R3, R6, #4 
JSR GET_LETTER
JSR POP
LD R0, LINE
OUT

JSR GRADE_INT
LEA R6, GRADES
STR R3, R6, #5 
JSR GET_LETTER
JSR POP
LD R0, LINE
OUT


;GETTING THE LETTER GRADE
;R2 IS MEANT TO COMPARE THE SCORE AND LETTER GRADE
GET_LETTER
	AND R2, R2, #0 ;CLEARING R2 

;AN IF CONDITION IF A SCORE GET A 90
A_LETTER	LD R5, NINETY 	;LOAD THE SCORE COULD BE a-e
LD R6, A		;LOADS THE SYMBOL
ADD R2, R7, R5	;COMPARE THE VALUE  R7 IS THE INPUT VALUE
BRzp STR_GRD	;STORE GRADE


;AN IF CONDITION IF A  SCORE GET A 80
B_LETTER AND R2, R2, #0	;CLEARING R2
LD R5, EIGHTY
LD R6, B
ADD R2, R7, R5
BRzp STR_GRD

;AN IF CONDITION IF A SCORE GET A 70
C_LETTER AND R2, R2, #0	;CLEARING R2
LD R5, SEVENTY
LD R6, C
ADD R2, R7, R5
BRzp STR_GRD

;AN IF CONDITION IF A SCORE GET A 60
D_LETTER AND R2, R2, #0	;CLEARING R2
LD R5, SIXTY
LD R6, D
ADD R2, R7, R5
BRzp STR_GRD

;AN IF CONDITION IF A SCORE GET A 50
F_LETTER AND R2, R2, #0	;CLEARING R2
LD R5, FIFTY
LD R6, F
ADD R2, R7, R5
BRzp STR_GRD

RET

;STORE GRADE
STR_GRD 	ST R7, SAVE1	;SAVES JSR LOCATION
AND R0, R0, #0
ADD R0, R6, #0
JSR PUSH
LD R7, SAVE1
RET

NINETY 	.FILL #-90
A		.FILL X41
EIGHTY	.FILL #-80
B		.FILL X42
SEVENTY 	.FILL #-70
C		.FILL X43
SIXTY      	.FILL #-60
D		.FILL X44
FIFTY       	.FILL #-50
F		.FILL X45
;END GET LETTER

;FINDING MAXIMUM
LD R1, TESTS;LOAD THE TOTAL NUMBER OF TESTS TO REGTER 1
LEA R2, GRADES
LD R3, GRADES	;ARRAY
ST R3, MAX_GRADE
ADD R2, R2, #1

LOOP1 LDR R5, R2, #0
	NOT R3, R3
	ADD R3, R3, #1
	ADD R5, R5, R3
	BRp NEXT1
	LEA R0, MAX
	PUTS
	LD R4, MAX_GRADE
AND R1, R1, #0
LD R0, SPACE
OUT
LD R0, LINE
OUT
JSR CLEAR_REG	;CLEAR REGISTERS FOR OTHER SUBROUTINES
;END OF FINDING MAX


;Finding Minimum
   LD R1, TESTS
   LEA R2, GRADES
   LD R3, GRADES
   ST R3, MIN_GRADE
   ADD R2, R2, #1
   ADD R1, R1, #-1

LOOP2   LDR R5, R2, #0
   NOT R3, R3
	   ADD R3, R3, #1		
	   ADD R5, R5, R3
	   BRn NEXT2

	   ADD R2, R2, #1
	   LD R3, GRADES
	   AND R5, R5,#0
	   ADD R1,R1,#-1
	   BRp LOOP2

	   LEA R0, MIN
	   PUTS
	   LD R4, MIN_GRADE
	   AND R1, R1, #0
	   LD R0, SPACE
	   OUT
   LD R0, LINE
   OUT
   JSR CLEAR_REG
;End Of Finding Min


;FINDING THE AVERAGE 
;1) Load total number of tests (5);
;2) Load starting address of marks;
;3) Create a loop to add up the test score;
AVERAGE LD R1,TESTS 
 LD R2, GRADES ;HOLDS THE ADDRESSES OF GRADES
AND R6, R6, #0
 SUM LDR R3, R2, #0 ;VALUE TO ADD TO R4 
ADD R4 , R4, R3  ;SUM WILL BE IN R4 
ADD R2, R2, #1   ;GOES TO THE NEXT GRADE
ADD R1, R1, #-1  ;SUBTRACT FROM NUM_TESTS
		      ;THE LOOP STOPS WHEN THIS IS 0 OR NEG.
BRp SUM	 

LDI R1,TESTS 
NOT R1, R1
ADD R1, R1, #1 ;R5 VALUE IS -5 
ADD R3 , R4, #0; SUM COPIED TO R3

LOOP3 ADD R3, R3, #0; 
BRnz AVERAGE ;LOOP CONDITION: IF THE SUM WAS SUBTRACTED TO OR BELOW ZERO
ADD R5, R5, #1 ; SUBTRACT 5 FROM TOTAL (DIVISION)
ADD R4, R4, R1 ; INCREMENTS BY 1 (COUNTS HOW MANY TIMES 5 WAS SUBTRACTED FROM SUM TO REACH 0)
BRnzp LOOP3 ;UNCONDITIONAL BRANCH

TOT_AVG ST R5, AVG_SCORE 
LEA R0, AVG
PUTS
AND R1, R1, #0
AND R3, R3, #0
AND R4, R4, #0
ADD R3, R3, R5
HALT

NEXT1 LDR R3, R2, #0
ST R3, MAX_GRADE
ADD R2, R2, #1
ADD R1, R1, #-1
BRp LOOP1

NEXT2 LDR R3, R2, #0
	ST R3, MIN_GRADE
ADD R2, R2, #1
ADD R1,R1, #-1
BRnzp LOOP2

;POP 
POP LD R1, POINTER
ST R2, SAVE1
LD R2, BASE
ADD R2, R2, R1
LD R2, SAVE1
LDR R0, R1, #0
ST R3 SAVE1
OUT 
ADD R1, R1, #1 
ST R1, POINTER
LD R3, SAVE1
RET
;PUSH
;ADD THE NEW TEST SCORE TO THE REGISTER THAT HOLDS THE TEST SCORES
;THEN STORE IT
;RET
 PUSH ST R3, SAVE2
JSR CLEAR_REG
LD R1, POINTER
 ADD R4, R4 #-1
ST R1, POINTER
LD R3 SAVE2
RET
BASE .FILL xC000
POINTER .FILL x4000
;CLEAR ALL REGISTER FOR OTHER SUBROUTINE 
CLEAR_REG	AND R1, R1, #0
		AND R2, R2, #0
		AND R3, R3, #0
		AND R4, R4, #0
		AND R5, R5, #0
		AND R6, R6, #0
		AND R7, R7, #0
RET
;END OF CLEARING REGISTER

HALT ;END OF MAIN

LOCATION .FILL X0 

GRADE_INT  		ST R7, LOCATION	
			JSR CLEAR_REG		;CLEARS REGISTERS
		

			GETC				;FIRST SINGLE DIGIT(CHAR)
			OUT			
	
			ADD R1, R0, #0		; COPY INPUT TO R1
			ADD R1, R1, #-16		; ASCII CONVERSION
			ADD R1, R1, #-16	
			ADD R1, R1, #-16	
			ADD R2, R2, #10		; 10 FOR MULTIPLICATION


MULT10	        	ADD R3, R3, R1		; STORE USER INPUT IN R3
			ADD R2, R2, #-1		; DECREMENT 10 BY 1
			BRp MULT10			; STOP WHEN R2<0
	
			GETC				; SECOND SINGLE DIGIT (CHAR)
			OUT			
	
			ADD R0, R0, #-16		; ASCII CONVERSION
			ADD R0, R0, #-16
			ADD R0, R0, #-16

			ADD R3, R3, R0		; COMBINE 1ST & 2ND DIGIT 
		
	
			LD R0, SPACE		;ADD  SPACE
			OUT				;PRINT SPACE

			LD R7, LOCATION	
RET		

SPACE .FILL x20
LINE .FILL xA
SAVE1 .FILL x0
SAVE2 .FILL x0
TESTS .FILL 5
AVG_SCORE .BLKW 1 
MAX_GRADE .BLKW 1
MIN_GRADE .BLKW 1
;TOT_AVG .BLKW 1 
GRADES .BLKW 5
MAX .STRINGZ "MAX "
MIN .STRINGZ "MIN "
AVG .STRINGZ "AVG "
.END

